trigger:
  branches:
    include:
    - main

pr: none

variables:
- name: tag
  value: latest

pool:
  vmImage: macOS-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
  displayName: 'Install Node.js'

- script: |
    npm install -g @devcontainers/cli
  displayName: 'npm install devcontainer'

- script: |
    brew --version
    brew update
    brew --version
    dockerInstallationScriptName='docker.rb'
    dockerInstallationScriptUrl="https://raw.githubusercontent.com/Homebrew/homebrew-cask/fe866ec0765de141599745f03e215452db7f511b/Casks/$dockerInstallationScriptName"
    # dockerInstallationScriptUrl="https://raw.githubusercontent.com/Homebrew/homebrew-cask/master/Casks/$dockerInstallationScriptName"
    curl -L  $dockerInstallationScriptUrl > $dockerInstallationScriptName && brew install --cask $dockerInstallationScriptName
    echo 'Installing Docker Desktop for Mac ...'
    start=$SECONDS
    sudo /Applications/Docker.app/Contents/MacOS/Docker --unattended --install-privileged-components
    open -a /Applications/Docker.app --args --unattended --accept-license
    end=$SECONDS
    duration=$(( end - start ))
    echo "Docker Desktop for Mac has been installed in $duration seconds"
    echo 'Starting Docker service ...'
    start=$SECONDS
    retries=0
    maxRetries=100
    sudo bash -c `
    set -x
    command -v docker || echo 'test docker command 1: not found'
    i=0
    while ! /Applications/Docker.app/Contents/Resources/bin/docker system info &>/dev/null; do
    (( i++ == 0 )) && printf %s '-- Waiting for Docker to finish starting up...' || printf '.'
    command -v docker || echo 'test docker command loop: not found'
    sleep 5
    if [ $i -gt 180 ];then sudo /Applications/Docker.app/Contents/MacOS/com.docker.diagnose check;uname -a;system_profiler SPHardwareDataType;echo "::error::-- Wait docker start $i s too long, exit"; exit 1; fi
    done
    echo "::notice::-- Docker is ready.Wait time is $i s"
    uname -a || true
    system_profiler SPHardwareDataType || true
    `
    end=$SECONDS
    duration=$(( end - start ))
    echo "Docker service has started after $duration seconds"
    docker --version
    docker-compose --version
  displayName: Install and start Docker

- task: Docker@2
  displayName: Login to DockerHub
  inputs:
    command: login
    containerRegistry: dockerhub-connection

- script: |
    docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    docker buildx create --use
  displayName: configure multi-arch and buildx

- script: |
    devcontainer build --workspace-folder=. \
    --image-name=edgenesis/devcontainer-go:$(tag) \
    --image-name=edgehub/devcontainer-go:$(tag) \
    --platform=linux/amd64,linux/arm64 --push
  displayName: 'build and push devcontainer'